Special Prime
Given an integer N, find out the number of pairs of (x, y) such that,


0 <= x,y <=N and F(x) +F(y) = Prime number


Here, F(x) = sum of digits of x


Note: (x,y) and (y,x) are to be treated as the same pair.


Since the answer may be too large, print the output modulo 1000000007. 

Input Format : One single integer input N

Input Constraints : 0 <= N <=10^50

Output Format : One single integer denoting the number of pairs of x,y

Sample Input :

3
Sample Output :

5
Your Code
1
//Enter your Code here
Output


Encryption
In cryptography, encryption is the process of encoding a message or information in such a way that only authorized parties can access it and those who are not authorized cannot. Encryption does not itself prevent interference but denies the intelligible content to a would-be interceptor.





Shamir, a leading cryptanalyst comes across a sequence of characters, this sequence is basically a set of alphabet that needs to be transmitted. He finds it really trivial and hence gives this work to you. Since you want to work with him in the future, you agree to this. The rule for encoding is that you need to look at the string and reduce its length by grouping the repeated characters together and include the number of repetitions in front of the repeated character. You can refer the sample input and sample output for understanding this much more in detail. Get started! 

Input Format : Single line containing the string that needs to be encrypted.

Input Constraints : 1<= length (string) <= 1000

Output Format : Print the encoded string.

Sample Input :

CABBBABBBCABBBABBBCABBBABBB
Sample Output :

3C2A3B

Key to Earth - Butterfly Effect - 3
After a lot of Struggles somehow Dinesh alias CM managed to escape from the prison in the planet of Zorbia and entered the spaceship after cracking the code lock. He rushed in, the clock is ticking, he has very less time before any other zorbian guard finds out that he is missing. So, he rushes and starts the spaceship, but who will leave the spaceship without a lock. A key is needed to start the spaceship, but not a key that we use for lock, it is a virtual numeric key, consists of 18 lines of passcode, each line has three different numbers. In order to find the Key, there is another cube lock. But this one is a bit more complicated than the previous one. This cube also has six faces, and each face has 9 numbers(3 rows of 3 numbers).


You search the spaceship and find two pieces of paper out of which one has the moves that must do to the cube so that you will get the pass code. Hurry up. Every second Counts and the other cube has a string "01000011 01100001 01110000 01110100 01110101 01110010 01100101 00100000 01011010 01101111 01110010 01100010 01101001 01100001 ", he dosent know what to do with the the zeros and ones. And he found another bit of paper which had "01010100 01101111 00100000 01001100 01101111 01110010 01100100 00100000 01000011 01101111 01101101 ". He decided to skip over the ones and zeros and ones and use the paper which had the moves.


The key is found, Dinesh takes off the spaceship and goes into outer space, he also managed to send a virus attack that will make harm all the other spaceship except for the one that he is in now. He managed to reach near the wormhole which connected between the Zorbia's universe and Earth's universe, but something stopped him from entering. He stopped and something struck his mind. He turned his spaceship back towards Zorbia.. But Why?


.......to be continued!

Input Format : Eighteen lines of input, each line having three spaced integer inputs.
Input is in the order of Front,Bottom,Back,Top,Left, RIght.
The nineteenth line has the list of operations that you must do.
Motions that are possible
L - Rotate the Left layer up
M - Rotate the middle layer up
R - Rotate the Right Layer up
SPINL - Spin the cube left-hand side
SPINR - Spin the cube right-hand side
SPINU - Spin the cube up
SPIND - Spin the cube down

Front - Face1
Bottom - Face2
Back - Face3
Top - Face4

Input Constraints : Maximum of 10000 manipulation
Each number less than 10^9

Output Format : 18 lines of output, each line consisting of 3 integers

Sample Input :

365 917 971
843 894 347
50 796 753
306 653 874
158 909 355
92 418 979
941 599 288
395 217 668
924 778 671
997 899 50
875 915 904
262 32 145
942 409 30
385 158 296
883 464 164
943 66 161
210 2 801
893 948 274
SPIND7822663SPINL1159534SPINL7217751SPINL3557326SPIND9532893SPIND2172429L3389543R6552383M742352SPINR7504050M4590643SPINL2168039R4584171R7720230M9298903SPINU3612037L5756778L5376861R6691547R8098371SPINL2196620SPINL8127020SPINR1466759L2792539SPIND8481691SPIND5586242SPINR1630648L147104SPINL7261411M3132556SPINL2294405R108491M1386700L7312996SPINL1843554M8815720SPINR6590493SPINL1905311SPINU7612153M9052371SPINU5051493SPINR1899049SPIND3115958R7402064SPINR389007SPINL3568184L1690094SPIND2411753L6831849L623626R6537455SPINR9447368R9523368SPIND2985779R6889610SPINR7220286M1801982R5115982R7676696M6188022R6034537SPINR3803881SPINU1476076L8669504M1388162SPINR4558493M2596495SPINU3275558R6093132SPINU9461465SPINR2159003M8482851L4944014L4642684SPINU4739399SPIND7407754SPINR7352497SPINL2011251SPINR3082290SPINL2725516SPINU4341994R9229791M7046272R4301088L2012167SPINU9018656R238166R9253410L2461414R9347402SPIND2189440L700586SPINL888580SPINL7198555SPINU9241346M6692279R3434435SPIND7798143SPINL2932192M2669787SPINR2504205SPINU5195587R5553145M4223367SPINL1508595SPINL5989925SPINL229940SPINL546052L5486787M5253568SPINR8874536L1484764L760648SPINL1267393SPINU4988645SPINR1905553SPINU2574171SPINR9454648M8512152R5323932M3060773SPINR4785480R320789SPIND8291867SPINL850544L5600560SPINU2486615SPINL2212010SPIND7939797R3290461R8638947SPINL7693681SPINR2117604
Sample Output :

883 843 943
599 217 778
942 668 893
924 801 753
875 915 355
979 653 50
274 796 161
395 894 347
30 917 164
262 32 306
158 909 904
941 296 971
365 464 92
385 158 418
288 409 997
145 66 50
899 2 210
874 948 671

///////////////////////////////////////////////////////////////////////////////////////////////////////
                MOCKVITA QUESTIONS

Prime Fibonnaci
Problem Description
Given two numbers n1 and n2

1. Find prime numbers between n1 and n2, then

2. Make all possible unique combinations of numbers from the prime numbers list you found in step 1. 

3. From this new list, again find all prime numbers.

4. Find smallest (a) and largest (b) number from the 2nd generated list, also count of this list.

5. Consider smallest and largest number as the 1st and 2nd number to generate Fibonacci series respectively till the count (number of primes in the 2nd list).

6. Print the last number of a Fibonacci series as an output

Constraints
2 <= n1, n2 <= 100

n2 - n1 >= 35

Input Format
One line containing two space separated integers n1 and n2.

Output
Last number of a generated Fibonacci series.

Timeout
1


Test Case
Example 1

Input

2 40

Output

13158006689

Explanation

1st prime list = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]

Combination of all the primes = [23, 25, 27, 211, 213, 217, 219, 223, 229, 231, 32, 35, 37, 311, 313, 319, 323, 329, 331, 337, 52, 53, 57, 511, 513, 517, 519, 523, 529, 531, 537, 72, 73, 75, 711, 713, 717, 719, 723, 729, 731, 737, 112, 113, 115, 117, 1113, 1117, 1119, 1123, 1129, 1131, 1137, 132, 133, 135, 137, 1311, 1317, 1319, 1323, 1329, 1331, 1337, 172, 173, 175, 177, 1711, 1713, 1719, 1723, 1729, 1731, 1737, 192, 193, 195, 197, 1911, 1913, 1917, 1923, 1929, 1931, 1937, 232, 233, 235, 237, 2311, 2313, 2317, 2319, 2329, 2331, 2337, 292, 293, 295, 297, 2911, 2913, 2917, 2919, 2923, 2931, 2937, 312, 315, 317, 3111, 3113, 3117, 3119, 3123, 3129, 3137, 372, 373, 375, 377, 3711, 3713, 3717, 3719, 3723, 3729, 3731]

2nd prime list=[193, 3137, 197, 2311, 3719, 73, 137, 331, 523, 1931, 719, 337, 211, 23, 1117, 223, 1123, 229, 37, 293, 2917, 1319, 1129, 233, 173, 3119, 113, 53, 373, 311, 313, 1913, 1723, 317]

smallest (a) = 23

largest (b) = 3719

Therefore, the last number of a Fibonacci series i.e. 34th Fibonacci number in the series that has 23 and 3719 as the first 2 numbers is 13158006689

Example 2

Input

30 70

Output

2027041 

Explanation

1st prime list=[31, 37, 41, 43, 47, 53, 59, 61, 67]

2nd prime list generated form combination of 1st prime list = [3137, 5953, 5347, 6761, 3761, 4337, 6737, 6131, 3767, 4759, 4153, 3167, 4159, 6143]

smallest prime in 2nd list=3137
largest prime in 2nd list=6761

Therefore, the last number of a Fibonacci series i.e. 14th Fibonacci number in the series that has 3137 and 6761 as the first 2 numbers is 2027041



Collision Course
Problem Description
On a busy road, multiple cars are passing by. A simulation is run to see what happens if brakes fail for all cars on the road. The only way for them to be safe is if they don't collide and pass by each other. The goal is to identify whether any of the given cars would collide or pass by each other safely around a Roundabout. Think of this as a reference point O ( Origin with coordinates (0,0) ), but instead of going around it, cars pass through it.

Considering that each car is moving in a straight line towards the origin with individual uniform speed. Cars will continue to travel in that same straight line even after crossing origin. Calculate the number of collisions that will happen in such a scenario.

Note : - Calculate collisions only at origin. Ignore the other collisions. Assume that each car continues on its respective path even after the collision without change of direction or speed for an infinite distance.

Constraints
1<=C<=10^5

-10^9 <= x,y <= 10^9

0 < v < 10^9.

Input Format
The first line contains an integer C, denoting the number of cars being considered that are passing by around the origin.

Next C lines contain 3 space delimited values, first two of them being for position coordinates (x,y) in 2D space and the third one for speed (v).

Output
A single integer Q denoting the number of collisions at origin possible for given set of cars.

Timeout
1


Test Case
Example 1

Input

5

5 12 1

16 63 5

-10 24 2

7 24 2

-24 7 2

Output

4

Explanation

Let the 5 cars be A, B, C, D, and E respectively.

4 Collisions are as follows -

1) A & B.

2) A & C.

3) B & C.

4) D & E.


Television Sets
Problem Description
Dr. Vishnu is opening a new world class hospital in a small town designed to be the first preference of the patients in the city. Hospital has N rooms of two types - with TV and without TV, with daily rates of R1 and R2 respectively. 

However, from his experience Dr. Vishnu knows that the number of patients is not constant throughout the year, instead it follows a pattern. The number of patients on any given day of the year is given by the following formula – 

(6-M)^2 + |D-15| where

M is the number of month (1 for jan, 2 for feb ...12 for dec) and

D is the date (1,2...31).

All patients prefer without TV rooms as they are cheaper, but will opt for with TV rooms only if without TV rooms are not available. Hospital has a revenue target for the first year of operation. Given this target and the values of N, R1 and R2 you need to identify the number of TVs the hospital should buy so that it meets the revenue target. Assume the Hospital opens on 1st Jan and year is a non-leap year. 

Constraints
Hospital opens on 1st Jan in an ordinary year

5 <= Number of rooms <= 100

500 <= Room Rates <= 5000

0 <= Target revenue < 90000000

Input Format
First line provides an integer N that denotes the number of rooms in the hospital

Second line provides two space-delimited integers that denote the rates of rooms with TV (R1) and without TV (R2) respectively

Third line provides the revenue target

Output
Minimum number of TVs the hospital needs to buy to meet its revenue target. If it cannot achieve its target, print the total number of rooms in the hospital.

Timeout
1


Test Case
Example 1

Input

20

1500 1000

7000000

Output

14 

Explanation

Using the formula, number of patients on 1st Jan will be 39, on 2nd Jan will be 38 and so on. Considering there are only twenty rooms and rates of both type of rooms are 1500 and 1000 respectively, we will need 14 TV sets to get revenue of 7119500. With 13 TV sets Total revenue will be less than 7000000

Example 2

Input

10

1000 1500

10000000

Output

10

Explanation

In the above example, the target will not be achieved, even by equipping all the rooms with TV. Hence, the answer is 10 i.e. total number of rooms in the hospital.


Lazy Student
Problem Description
There is a test of Algorithms. Teacher provides a question bank consisting of N questions and guarantees all the questions in the test will be from this question bank. Due to lack of time and his laziness, Codu could only practice M questions. There are T questions in a question paper selected randomly. Passing criteria is solving at least 1 of the T problems. Codu can't solve the question he didn't practice. What is the probability that Codu will pass the test?

Constraints
0 < T <= 10000

0 < N, T <= 1000

0 <= M <= 1000

M,T <= N

Input Format
First line contains single integer T denoting the number of test cases.

First line of each test case contains 3 integers separated by space denoting N, T, and M.

Output
For each test case, print a single integer.

If probability is p/q where p & q are co-prime, print (p*mulInv(q)) modulo 1000000007, where mulInv(x) is multiplicative inverse of x under modulo 1000000007.

Timeout
1


Test Case
Example 1

Input

1

4 2 1

Output

500000004

Explanation

The probability is ½. So output is 500000004.


Lifeguard Prob
Problem Description
A life guard is sitting on a beach on a lookout for potential emergencies.

He suddenly notices a person who is drowning and springs to action.

He runs up to the sea with a speed f*V km/hr, then he swims straight to the person at the rate V km/hr (both in straight lines and where f is a multiplying factor as humans run much faster than they can swim).

He wants to minimize the time taken to get to that person.

See the below image for better understanding :

com.tcs.cv.automata.ei.middleware.DocxToHtmlConverter@7452c059:image1.png

Since the lifeguard runs faster, it will save some more time to run a longer distance rather than going straight and thus swimming a long distance.

However, this comes with the trade-off that running longer can actually mean going a longer distance thus taking more time.

Thus, it can be logically inferred that, there must exist a spot on the Beach-Sea Interface where, if the lifeguard directly runs to from his starting location, and then swims directly to the drowning person, it'll take the least time.

Given the starting location , the location of the drowning person and the multiplying factor f, find the optimized spot for fastest time.

Assumptions/Problem Explanation:

1. Consider that everything is in a two dimensional (2D) plane.

The x axis represents the Beach-Sea interface, positive Y axis is towards land and negative Y-axis towards sea (See image above).

2. The Y-axis along with origin is at some arbitrary location to the left of both the lifeguard and the drowning person. Since the origin point remains the same for both of them and the staring locations are given relative to the origin , its actual location does not matter. The only thing to note is, the origin and Y axis is to the left of both of them, so beach is always in 1st quadrant and sea in 4th. Thus, the positions of lifeguard and the drowning person are given as their (x,y) co-ordinates. (7,5) means the person is 7 units on the axis and 5 units on the positive y axis, and hence on the beach. Similarly, (7,-5) means the person is 7 units on the axis and 5 units on the negative Y axis, and hence in sea.

3. The lifeguard both runs and swims in perfectly straight lines.

4. With regards to everything explained above, your task is to find a point on the Beach-Sea Interface (X -axis) (x_optimized,0) to where if the lifeguard runs directly from his starting position and then swims directly from the point to the drowning person, it'll take the least amount of time.

5. All calculations must be done upto 6 decimal points accuracy and the output must be upto 6 decimal points as well.

Constraints
0 <= x_l < 100 (Integer)

0 <= y_l < 100 (Integer)

0 <= x_w < 100 (Integer)

-500 < y_w < 0 (Integer)

1 < f <= 15 (Integer)

Input Format
The input shall consist of 3 parameters :

1. Starting position of the lifeguard in terms of his coordinates (x_l,y_l).

2. Position of the drowning person (x_w,y_w)

3. The multiplying factor f.

These parameters would be given in the following order in 5 different lines:

x_l

y_l

x_w

y_w

f

Output
Output must be a single number, x_optimized, as described above. The output must be having accuracy to 6 decimal places. That is, 1 should be represented as 1.000000

Timeout
1


Test Case
Example 1

Input

1

1

1

-1

1.2

Output

1.000000




Timed out after 30000 ms while waiting for a server that matches ReadPreferenceServerSelector{readPreference=primary}. Client view of cluster state is {type=UNKNOWN, servers=[{address=134.209.154.103:27017, type=UNKNOWN, state=CONNECTING, exception={com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.SocketTimeoutException: connect timed out}}]; nested exception is com.mongodb.MongoTimeoutException: Timed out after 30000 ms while waiting for a server that matches ReadPreferenceServerSelector{readPreference=primary}. Client view of cluster state is {type=UNKNOWN, servers=[{address=134.209.154.103:27017, type=UNKNOWN, state=CONNECTING, exception={com.mongodb.MongoSocketOpenException: Exception opening socket}, caused by {java.net.SocketTimeoutException: connect timed out}}]